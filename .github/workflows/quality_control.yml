name: Quality Control

on:
  push:
    branches: [ main, dev, integration-cleanup ]
  pull_request:
    branches: [ main, dev, integration-cleanup ]

jobs:
  discover-mcps:
    name: Discover MCP Directories
    runs-on: ubuntu-latest
    outputs:
      mcps: ${{ steps.discover.outputs.mcps }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Discover MCP directories
      id: discover
      run: |
        # Find all directories in mcps/ that have a pyproject.toml file
        mcps_list=$(find mcps -maxdepth 1 -type d -exec test -f {}/pyproject.toml \; -print | sed 's|mcps/||' | sort)
        mcps=$(echo "$mcps_list" | jq -R -s -c 'split("\n")[:-1]')
        echo "mcps=$mcps" >> $GITHUB_OUTPUT
        echo "Found MCPs: $mcps"

  ruff:
    name: Ruff
    runs-on: ubuntu-latest
    needs: discover-mcps
    strategy:
      matrix:
        mcp: ${{ fromJson(needs.discover-mcps.outputs.mcps) }}
        python-version: ["3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies for ${{ matrix.mcp }}
      run: |
        cd mcps/${{ matrix.mcp }}
        if [ -f pyproject.toml ]; then
          uv sync --all-extras --dev || echo "Failed to sync dependencies, continuing..."
        fi
        uv add --dev ruff || echo "Failed to add ruff, continuing..."
    
    - name: Run Ruff linter on ${{ matrix.mcp }}
      run: |
        cd mcps/${{ matrix.mcp }}
        uv run ruff check --output-format=github . || echo "Ruff check completed with issues"
    
    - name: Run Ruff formatter check on ${{ matrix.mcp }}
      run: |
        cd mcps/${{ matrix.mcp }}
        uv run ruff format --check . || echo "Ruff format check completed with issues"

  mypy:
    name: MyPy
    runs-on: ubuntu-latest
    needs: discover-mcps
    strategy:
      matrix:
        mcp: ${{ fromJson(needs.discover-mcps.outputs.mcps) }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.12
    
    - name: Install dependencies for ${{ matrix.mcp }}
      run: |
        cd mcps/${{ matrix.mcp }}
        if [ -f pyproject.toml ]; then
          uv sync --all-extras --dev || echo "Failed to sync dependencies, continuing..."
        fi
        uv add --dev mypy || echo "Failed to add mypy, continuing..."
    
    - name: Run MyPy on ${{ matrix.mcp }}
      run: |
        cd mcps/${{ matrix.mcp }}
        if [ -d src ]; then
          uv run mypy src/ --ignore-missing-imports --show-error-codes --no-error-summary || echo "MyPy completed with issues"
        else
          echo "No src directory found for ${{ matrix.mcp }}"
        fi

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: discover-mcps
    strategy:
      matrix:
        mcp: ${{ fromJson(needs.discover-mcps.outputs.mcps) }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.12
    
    - name: Install dependencies for ${{ matrix.mcp }}
      run: |
        cd mcps/${{ matrix.mcp }}
        if [ -f pyproject.toml ]; then
          uv sync --all-extras --dev || echo "Failed to sync dependencies, continuing..."
        fi
        uv add --dev pytest pytest-cov || echo "Failed to add pytest, continuing..."
    
    - name: Run tests for ${{ matrix.mcp }}
      run: |
        cd mcps/${{ matrix.mcp }}
        if [ -d tests ]; then
          uv run pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=html --cov-report=term || echo "Tests completed with issues"
        else
          echo "No tests directory found for ${{ matrix.mcp }}"
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: hashFiles('mcps/${{ matrix.mcp }}/coverage.xml') != ''
      with:
        file: mcps/${{ matrix.mcp }}/coverage.xml
        flags: ${{ matrix.mcp }}
        name: codecov-${{ matrix.mcp }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: hashFiles('mcps/${{ matrix.mcp }}/htmlcov/') != ''
      with:
        name: coverage-html-${{ matrix.mcp }}
        path: mcps/${{ matrix.mcp }}/htmlcov/

  security:
    name: Security
    runs-on: ubuntu-latest
    needs: discover-mcps
    strategy:
      matrix:
        mcp: ${{ fromJson(needs.discover-mcps.outputs.mcps) }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.12
    
    - name: Install dependencies for ${{ matrix.mcp }}
      run: |
        cd mcps/${{ matrix.mcp }}
        if [ -f pyproject.toml ]; then
          uv sync --all-extras --dev || echo "Failed to sync dependencies, continuing..."
        fi
    
    - name: Run dependency security audit
      run: |
        cd mcps/${{ matrix.mcp }}
        if [ -f uv.lock ]; then
          uv audit || echo "Security audit completed with issues"
        else
          echo "No uv.lock file found for ${{ matrix.mcp }}"
        fi
    
    - name: Verify lockfile integrity
      run: |
        cd mcps/${{ matrix.mcp }}
        if [ -f uv.lock ]; then
          uv sync --locked || echo "Lockfile verification failed"
        fi
    
    - name: Run Bandit security scan
      run: |
        cd mcps/${{ matrix.mcp }}
        if [ -d src ]; then
          uv run --with bandit bandit -r src/ -f json -o bandit-report.json || echo "Bandit scan completed with issues"
        else
          echo "No src directory found for ${{ matrix.mcp }}"
        fi
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ matrix.mcp }}
        path: |
          mcps/${{ matrix.mcp }}/bandit-report.json